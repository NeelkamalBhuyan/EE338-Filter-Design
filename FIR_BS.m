F_sampling = 260e3;

% Kaiser window parameters
A_val = -20*log10(0.15);
if(A_val < 21)
    Beta_val = 0;
elseif(A_val <51)
    Beta_val = 0.5842*(A_val-21)^0.4 + 0.07886*(A_val-21);
else
    Beta_val = 0.1102*(A_val-8.7);
end

% delta omega and minimum window length calculation
delta_omega_T =  2*pi*4e3/F_sampling;
N_min = ceil((A_val-7.95) / (2.285*delta_omega_T));

% Window length for tolerance restrictions to get satisfied
n=N_min+14;

% Impulse response of ideal BPF of window length = n
ideal_bs_resp =  low_pass_ideal_resp(pi,n) -low_pass_ideal_resp(1.28075,n) + low_pass_ideal_resp(0.7008,n);

% Kaiser Window of length = n through kaiser window function
kaiser_window_fn = (kaiser(n,Beta_val))';

% multiplying kaiser window to ideal filter impulse response to get FIR
% response
BS_FIR = ideal_bs_resp .* kaiser_window_fn;

% visualising frequency response
fvtool(BS_FIR);         

% Plotting magnitude response of filter
[H,f] = freqz(BS_FIR,1,1024, F_sampling);
plot(f,abs(H))
grid
figure;
% Plotting phase response of filter
[H,f] = freqz(BS_FIR,1,1024, F_sampling);
plot(f,angle(H))
grid

function response = low_pass_ideal_resp(wc,M)

% The Kaiser window function provided by MATLAB gives a window between 0 to
% n as opposed to what's been done as class, which is from -n/2 to n/2
% So, the entire ideal response has been shifted to the centre of the
% window, which is n/2
% This will only add an additional linear phase term of -omega*n/2, hence,
% will not change the linear nature of PHASE response of the FIR filter

% centre of kaiser window generated by MATLAB
cenre = (M-1)/2;

% Length of impulse response needed is equal to window length as the rest
% gets multiplied by zero
N = [0:1:(M-1)];

x = N - cenre + eps;
response = sin(wc*x) ./ (pi*x);
end
